name: Initialize Marketplace Action Request

on:
  issues:
    types: [opened]

jobs:
  initialize-request:
    runs-on: self-hosted
    steps:
    - name: Get JSON Data out of Issue Request
      uses: peter-murray/issue-body-parser-action@v1
      id: issue_body_parser_request
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        issue_id: ${{ github.event.issue.number }}
        payload_marker: request
    - name: Check out scripts
      uses: actions/checkout@v2
    - name: Setup Node
      uses: actions/setup-node@v2
      with:
        node-version: '14'
        check-latest: true
    - name: Install dependencies
      run: |
        cd .github/scripts
        npm install
    - name: Dump steps context
      run: echo '${{ toJSON(steps) }}'
    - name: Lookup the latest release of ${{ fromJson(steps.issue_body_parser_request.outputs.payload).owner }}/${{ fromJson(steps.issue_body_parser_request.outputs.payload).repo }}
      id: get_version
      run: |
        if [ '${{ fromJson(steps.issue_body_parser_request.outputs.payload).version }}' == 'latest' ]; then
          export VERSION=`curl https://api.github.com/repos/${{ fromJson(steps.issue_body_parser_request.outputs.payload).owner }}/${{ fromJson(steps.issue_body_parser_request.outputs.payload).repo }}/releases/latest | jq -r .name`
        else
          export VERSION=${{ fromJson(steps.issue_body_parser_request.outputs.payload).version }}
        fi
        echo "VERSION: $VERSION"
        echo "::set-output name=version::$VERSION"
    - name: Create the repo ${{ fromJson(steps.issue_body_parser_request.outputs.payload).repo }}_${{ steps.get_version.outputs.version }} on GitHub Enterprise Server
      uses: actions/github-script@main
      with:
        debug: true
        script: |
          const options = { token: '${{ secrets.TOKEN }}', actionsApprovedOrg: '${{ secrets.ACTIONS_APPROVED_ORG }}', baseUrl: '${{ github.api_url }}', version: '${{ steps.get_version.outputs.version }}' };
          const payload = ${{ steps.issue_body_parser_request.outputs.payload }}
          await require('./.github/scripts/initialize-request.js')({github, context, payload, options});
    - name: Check out requested action repo ${{ fromJson(steps.issue_body_parser_request.outputs.payload).owner }}/${{ fromJson(steps.issue_body_parser_request.outputs.payload).repo }}_${{ steps.get_version.outputs.version }}
      run: |
        git clone https://github.com/'${{ fromJson(steps.issue_body_parser_request.outputs.payload).owner }}/${{ fromJson(steps.issue_body_parser_request.outputs.payload).repo }}' requested-action
    - name: Show the directory
      run: ls -l requested-action
    - name: Push requested action to private repo in $ACTIONS_APPROVED_ORG org on GitHub Enterprise Server
      run: |
        cd requested-action
        git config user.email '${{ secrets.GITHUB_EMAIL }}'
        git config user.name '${{ secrets.GITHUB_USERNAME }}'
        if git checkout main; then
          git branch -m main-old
        fi
        git checkout ${{ steps.get_version.outputs.version }}
        git switch -c ${{ steps.get_version.outputs.version }}-branch
        git branch -m main
        export GHHOST=${{ github.server_url }}
        git remote add origin2 https://${{ secrets.TOKEN }}@${GHHOST#https://}/${{ secrets.ACTIONS_APPROVED_ORG }}/${{ fromJson(steps.issue_body_parser_request.outputs.payload).repo }}_${{ steps.get_version.outputs.version }}.git
        git push -u origin2 main
        git push -u origin2 ${{ steps.get_version.outputs.version }}
        